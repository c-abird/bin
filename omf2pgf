#!/usr/bin/python

from optparse import OptionParser
import os
import sys
import numpy as np
import itertools as it
from scipy import interpolate as ip
from math import sqrt

# hack to disable command line argument parser of magnum
argv = sys.argv[:]
sys.argv = ['sphinx-build']
from magnum import readOMF
sys.argv = argv

# set up option parser
parser = OptionParser()
parser.add_option("-d", "--direction", type="int", dest="direction", help="Slice normal direction", default=2)
parser.add_option("-s", "--slice", type="int", dest="slice", help="Number of slice, '-1' is average", default=-1)
parser.add_option("-i", "--interpolate", dest="interpolate", help="Interpolate to grid 10x10")
parser.add_option("-S", "--scale", dest="scale", help="scale factor", type="float", default=1.0)
parser.add_option("-c", "--color", dest="color", help="Create color file for component")
(options, args) = parser.parse_args(argv)

# TODO 
options.quiver_scale = 0.95

def interpolate(m, shape, tovertex=False):
  size = tuple(map(lambda x: float(x), m.shape[:2]))

  src_range_x = np.arange(0.5 * size[0]/m.shape[0], size[0], size[0]/m.shape[0])
  src_range_y = np.arange(0.5 * size[1]/m.shape[1], size[1], size[1]/m.shape[1])

  interp_x = ip.RectBivariateSpline(src_range_x, src_range_y, m[:,:,0])
  interp_y = ip.RectBivariateSpline(src_range_x, src_range_y, m[:,:,1])
  interp_z = ip.RectBivariateSpline(src_range_x, src_range_y, m[:,:,2])

  if tovertex:
    shape   = tuple(map(lambda x: x+1, shape))
    range_x = np.linspace(0.0, size[0], shape[0])
    range_y = np.linspace(0.0, size[1], shape[1])
  else:
    range_x = np.arange(0.5 * size[0]/shape[0], size[0] + size[0]/shape[0]/4, size[0]/shape[0])
    range_y = np.arange(0.5 * size[1]/shape[1], size[1] + size[1]/shape[1]/4, size[1]/shape[1])

  result = np.ndarray(shape=shape+(3,), dtype=float)
  result[:,:,0] = interp_x(range_x, range_y)
  result[:,:,1] = interp_y(range_x, range_y)
  result[:,:,2] = interp_z(range_x, range_y)

  return result

for filename in args[1:]:

  # Read OMF file
  print "Read: %s" % filename
  src = readOMF(filename)
  m = src.to_numpy()

  # Transpose and Slice
  axes = (0,1,2)[options.direction:] + (0,1,2)[0:options.direction] + (3,)
  if options.slice >= 0:
    m = m.transpose(axes)[options.slice,:,:,:]
  else:
    m = np.mean(m, axis=options.direction)
  m = np.roll(m, options.direction + 1, axis=2)

  # Interpolate
  shape  = tuple(map(lambda x: int(x), options.interpolate.split('x'))) if options.interpolate else m.shape[:-1]
  tovertex = True if options.color else False
  m      = interpolate(m, shape, tovertex)

  # Scaling
  scale = (
    src.mesh.size[(options.direction + 1) % 3] / shape[0] * options.scale,
    src.mesh.size[(options.direction + 2) % 3] / shape[1] * options.scale
  )

  # Write file
  if options.color:
    basename = os.path.splitext(os.path.basename(filename))[0]
    f = open("%s.%s" % (basename, options.color), 'w')
    f.write("x_0 x_1 f(x)\n")
    for i, j in it.product(range(0,m.shape[0]), range(0,m.shape[1])):
      if j == 0: f.write("\n")

      m_norm    = sqrt(sum(map(lambda x: x**2, m[i,j,:])))
      component = {'x':0, 'y':1, 'z':2}[options.color]
      value     = m[i,j,component] / m_norm

      values = (
          i * scale[0],
          j * scale[1],
          value
      )
      f.write("%f %f %f\n" % values)

    f.close()
    pass
  else:
    basename = os.path.splitext(os.path.basename(filename))[0]
    f = open("%s.quiver" % basename, 'w')
    f.write("x y u v\n")
    for i, j in it.product(range(0,m.shape[0]), range(0,m.shape[1])):
      m_norm = sqrt(sum(map(lambda x: x**2, m[i,j,:])))

      mx = m[i,j,0] / m_norm * min(scale) * options.quiver_scale
      my = m[i,j,1] / m_norm * min(scale) * options.quiver_scale

      values = (
          (0.5 + i) * scale[0] - 0.5 * mx,
          (0.5 + j) * scale[1] - 0.5 * my,
          mx, my
      )
      f.write("%f %f %f %f\n" % values)

    f.close()
